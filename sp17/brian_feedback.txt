* CSM Handouts

Note from Jerry: addressed comments are denoted with an asterisk (*), partially
addressed as a (+), and unaddressed ones are left as a hyphen (-)
  
** Overall Comments

- Some questions are too long and I think they don't have a high "learning per
  words rate" (a metric I just made up). I think simpler and more concise
  examples could be used for much of the same educational effect, although
  perhaps at the cost of some "fun".
- I think a lot of the problems could be tightened up, e.g. more careful with
  formatting and consistency issues. In particular, I think it's critical that
  all the solutions work and all the answers are correct (even more so than
  regular discussion solutions), since students in these sections are ones that
  need help and therefore may take whatever these solutions say as fact.

** Week 4: Recursion + HOFs

* nit: consistently use snake case, not use camel case
* nit: weird indentation in docstring
* nit: inconsistent indentation (2 spaces vs 4 spaces) and spaces around operators
* num_digits: I think the n == 0 return 0 base case is a little unintuitive; if
  n < 10 return 1 would make more sense?
* is_sorted: solutions reference number instead of n. might also make more sense
  to order from left to right (and wouldn't require a substantial change in
  solutions) (JC: I fixed the "number" detail)
* I like the environment diagrams!
* nit: I'm not a huge fan of the mystery HOF question (not clear on how
  instructive it is). I guess it depends on how long people typically spend on
  it. I think the last WWPP part is somewhat interesting though.
  
** Week 5: Mutable Data Structures + Data Abstraction

* lists:I think this is definitely useful for getting the basics down. maybe
  addingsomething about slicing would be helpful as well.
* all_prmes: typo has parameter num instead of nums. I think it'd be more
  usefulif you asked them to write it all three ways.
* nit: dctests are indented strangely in elephant (e.g. "Dumbo" should be at
  the sae indentation as >>>)
* elephat_roster: I think you should just use a list comprehension here. (I
  don't eally see a point in creating a new list every time, and we may as well
  try toenforce Pythonic idioms if it doesn't conflict with what we're
  teachig.)
* elephat DA: I'm not sure how useful students find this question (because DA
  alwaysseems to be boring...) but I think it's fine.
* tree D: I'd personally take out the asserts since I don't think they're
  reallyimportant to the DA. I think "always outputs a number" is misleading
  becaus that's not necessarily true. I'd also rather use "returns" over
  "outpus" and turn CAPS into lower case, but that's just me. I think to be
  cleare, the description for branches should say "always returns a *list* of
  trees"(since it's unclear what list of things are returned).
* I thin the "draw the tree" and "construct the tree" questions are helpful.
+ sum_ofnodes: the name of this function might be confusing (as well as using
  sum asan accumulator variable, which could be confused with the built-in
  functin because it's bolded and used differently in the two solutions). I
  also tink you can just initialize sum (or total) to root(t) before the loop.

** Week 6: Linked Lists

* skip: he non-mutating version could match the mutating version more closely
  (combie the two conditions and return lst)
* mutatig skip: indentation is weird on the recursive solution
- revers: recursive without helper breaks the original input linked
  list. also, camel case)
- negatin: is of questionable usefulness. I'm hesitant to include more random
  facts hat students who are struggling are going to try and remember.
- the oter (optional) mutating reverse solutions don't work either. Also, one
  of the uses == Link.empty instead of is Link.empty.
* has_cyle: description is missing some words -- perhaps "which takes in a
  Link ad returns True...". Also, indentation is weird here again. Isn't this
  a homeork question?
  
** Week 7: Nonlocal + OOP

- hoop: indentation is off. Also, this was the question I didn't really like
  because it seemed like too much set up code to read for not enough payoff in
  the actual question (class vs instance attributes, how to call methods,
  inheritance). Since the logic of the methods themselves isn't very
  complicated, I think it'd be easier if the methods were even simpler so that
  students aren't overwhelmed by things to read.
- teamballer: we don't discuss super, so I think it's confusing to bring it
  up. I'm not really sure why there are blanks for the parameter names to
  pass_ball. Also, I don't think this is correct; I think did_pass should be
  returned at the end.
- nonlocal kale: seems challenging, but I like this one.
- pingpong: docstring/doctest indentation is off, but it's an interesting
  problem. Seems tough to fit into the blanks, but that's just a nit.
- pingpong OOP: calling it a next method seems like it would confuse students
  when we discuss iterators and __next__. I again think implementing __call__ is
  more unnecessary things that I think students might waste time worrying about
  and learning (like the negation with reversing linked lists). That said, I do
  think this is an interesting exercise to compare the two, although perhaps the
  OOP problem should also warn that you shouldn't ever really need to use
  nonlocal with OOP. (Maybe with weasel words if anyone changes their mind
  later...) I also think the wording could be a bit better, for example:
  "Instead of using nonlocal variables to store state, we use instance
  attributes." I'm also not a huge fan of the last paragraph, mostly because I'm
  not really sure what it's trying to say.

** Week 8: Growth

- Initial comments: this is a really long worksheet for something we
  (historically) don't care much about. It seems pretty instructive, but there
  might be a better thing to spend an entire week on.
- 2e: why flip at all? Also, I guess it's true that fib is O(2^n), but that's
  not the tightest bound. (I'd personally try to avoid discussing the runtime
  of fib at length unless every student in the section is super into mathy
  arguments)
- same comments about various spacing issues
- 3: having three parts on the same trick seems not super helpful
- 4: square isn't defined anywhere, and the runtime analysis depends on it
  being O(1).
- 6: label/children should probably be root/branches? also, == True shouldn't be
  there. I'm also not entirely sure if the description of the function is
  correct...it seems like each child would have to have either n/n-1 occurrences
  of word. Also, the hint is unused. My guess for 6a would be that it returns
  True if there are any paths that from the root toward the leaves that have n
  occurrences of word. I also think it might be helpful to explain why trees are
  used at all (e.g. log time to find in a BST) but O(n) isn't a super
  interesting result.
- 7: I like this question (in the sense that it's a useful runtime analysis of
  linked lists). I think a good followup question (or preview question) would be
  insert_at_front or something.
  
** Week 9: Scheme

- I'm not sure if this beginning WWSP is super helpful, since a very similar
  one is done in discussion? I think there are too many questions about if,
  when maybe 1 or 2 would suffice. I think the questions at the end are
  helpful, although we don't worry that much about = vs eq?, so I'm not sure if
  those are necessary. I think null? is also missing.
- hailstone: I think cond would be better (perhaps less clunky / hard to read
  for first-time Schemers than nested ifs). Also, returns instead of outputs
  again.
- well-formed: "nested lists are ok" isn't the most accurate description; maybe
  "nested pairs are ok"? Also, I think well-formed is very similar to the
  built-in list? (maybe even identical? I don't remember the specifics.)
- I think doctests should start with scm>. Also, true/false should be
  True/False. (I'm actually not sure if they're technically called doctests
  unless they're in Python. Could be wrong though.)
  
** Week 10: More Scheme
   
- 1a: I like this style of question, although it might be unnecessarily long.
- 1b: (+ a) seems unnecessary, unless we wanted to just show them that + deals
  with one argument.
- 1c: Not sure if / is the best function to use, unless we want to show them
  that / can also take one argument.
- 1: There are a lot of parts to this question. I think you could drop b and d
  without much loss.
- 2: as in week 9, seems like some questions are unnecessarily long if we just
  want to show them short-circuiting behavior. There are also a lot. Also, I
  think 2h needs a longer explanation.
- 3: I think this is good for them to know, although maybe a clearer explanation
  would include something to the effect of "these bindings are made
  simultaneously, not consecutively, so foo doesn't have a value yet" before
  telling them that lets are really lambdas.
- lexical/dynamic scoping example was good!
- waldo: I think this question is actually easier than the one in week9. A
  harder problem would probably be more useful here.

** Week 11: Streams, Iterators, and Generators
   
- accumlator: missing ... in example, and spacing issues (seems to be tabs
  instead of spaces, maybe) otherwise, I think this is a fine question.
- 5: the explanation "the first time you call foo, it will yield a" isn't
  correct. The first time you call foo, you get back a generator object. Calling
  next on the generator starts executing the function until it hits a
  yield. Calling next on it again resumes execution after the yield until the
  function terminates. Also, I don't see the point of putting code in that if
  statement, or defining a at all. Also, I think it might be confusing for
  students to figure out exactly which lines of code come from which call to
  next. It would be better if it just manually called next twice.
- 6: Would be shorter if it was just a for loop over a range.
- 13: The if WWSP seems unnecessary. Could add a force example right after the
  delay example. Otherwise, this looks pretty good!
- 14: I like using hyphens instead of underscores in Scheme. flag might be
  confusing; maybe use doubled? or something instead.
- 15: Seems like there are two interleaved solutions?
  
** Week 12: SQL + Tail Recursion
   
- Tail recursion: I don't know how useful this dominos example is. (As someone
  who knows what tail recursion was, I didn't quite get the analogy.) I think a
  more concrete example (e.g. factorial) would be helpful here.
- 2: Rephrase to "Why is tail recursion useful?"
- 3: Rephrase to "Why is sum-list not properly tail recursive?" I think "when
  do you add 2 and 3" might be a confusing question.
- 4: Rephrase to "Rewrite sum-list as a tail recursive function."
- 5: I don't know how useful this is; maybe a table with fewer rows and fewer
  columns if people actually do this question.
- 9: "write a query that has the same data" is somewhat confusing, maybe
  rephrase to "write a query that alphabetizes the rows of the mentors table by
  name" or something.
